import { NestFactory } from '@nestjs/core';
import { ConfigService } from '@nestjs/config';
import { Logger, ValidationPipe } from '@nestjs/common';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import helmet from 'helmet';
import * as compression from 'compression';
import * as cookieParser from 'cookie-parser';
import type { NestExpressApplication } from '@nestjs/platform-express';
import type { CorsOptions } from '@nestjs/common/interfaces/external/cors-options.interface';

import AppModule from '@/app.module';
import type { configType } from './config';

const swaggerConfig = new DocumentBuilder()
  .setTitle('Conduit API')
  .setVersion('1.0.0')
  .setLicense('MIT License', 'https://opensource.org/licenses/MIT')
  .setContact('RealWorld', 'https://realworld.io', '')
  .setDescription('Conduit API')
  .addSecurity('Token', {
    type: 'apiKey',
    name: 'authorization',
    in: 'header',
    description: `For accessing the protected API resources, you must have received a a valid JWT token after registering or logging in.
This JWT token must then be used for all protected resources by passing it in via the 'Authorization' header.

A JWT token is generated by the API by either registering via /users or logging in via /users/login.

The following format must be in the 'Authorization' header :

    Token xxxxxx.yyyyyyy.zzzzzz`,
  })
  .addServer('/api')
  .build();

const corsConfig: CorsOptions = {
  origin: /.*/,
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  preflightContinue: false,
  optionsSuccessStatus: 204,
  credentials: true,
};

async function bootstrap() {
  const logger = new Logger(bootstrap.name);

  const app = await NestFactory.create<NestExpressApplication>(AppModule, {
    cors: corsConfig,
    logger: ['debug', 'verbose'],
  });

  const config = app.get<ConfigService<configType, true>>(ConfigService);

  logger.debug(
    `Resolved config:`,
    JSON.parse(JSON.stringify(config)).internalConfig,
  );

  logger.verbose('Use and set options');

  app.setGlobalPrefix('/api');
  app.useGlobalPipes(
    new ValidationPipe({
      transform: true,
      whitelist: true,
      forbidNonWhitelisted: true,
    }),
  );
  app.use(compression());
  app.set('trust proxy');
  app.use(helmet({ hidePoweredBy: true, noSniff: true }));
  app.use(cookieParser());

  logger.verbose('Initializing swagger');

  const swaggerDocument = SwaggerModule.createDocument(app, swaggerConfig, {
    ignoreGlobalPrefix: true,
  });
  const swaggerPath = config.get('swagger.path', { infer: true });
  SwaggerModule.setup(swaggerPath, app, swaggerDocument);

  logger.verbose(`Swagger set up at ${swaggerPath}`);

  const port = config.get('port', { infer: true });

  logger.verbose('Starting server');

  await app.listen(port, '0.0.0.0').then(async () => {
    logger.log(`Listening on ${await app.getUrl()}`);
  });
}

bootstrap();
